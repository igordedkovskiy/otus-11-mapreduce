#include <filesystem>

#include "mapreduce.hpp"

// В этом файле находится клиентский код, который использует наш MapReduce фреймворк.
// Этот код знает о том, какую задачу мы решаем.
// Задача этого кода - верно написать мапер, редьюсер, запустить mapreduce задачу, обработать результат.
// Задача - найти минимальную длину префикса, который позволяет однозначно идентифицировать строку в файле.
// Задача не решается в одну mapreduce задачу. Нужно делать несколько запусков.
//
// Как предлагаю делать я:
// Выделяем первые буквы слов (в мапере), решаем для них задачу "определить, есть ли в них повторы".
// Если не прокатило, повторяем процедуру, выделяя первые две буквы.
// И т.д. В итоге найдём длину префикса, который однозначно определяет строку.
//
// Здесь описано то, как я примерно решал бы задачу, это не руководство к действию, а просто пояснение к основному тексту задания.
// Вы можете поступать по-своему (не как я описываю), задание творческое!
// Можете делать так, как написано, если считаете, что это хорошо.
int main() {
    std::filesystem::path input("emails.txt");
    std::filesystem::path output("out");
    int mappers_count = 3;
    int reducers_count = 2;

    mapreduce::Framework mr(mappers_count, reducers_count);

    //цикл по длине префикса
    {
        mr.set_mapper([](){
            // моё предложение: 
            //     * получает строку, 
            //     * выделяет префикс, 
            //     * возвращает пары (префикс, 1).
        });
        mr.set_reducer([](){
            // моё предложение: 
            //     * получает пару (префикс, число),
            //     * если текущий префикс совпадает с предыдущим или имеет число > 1, то возвращает false,
            //     * иначе возвращает true.
            //
            // Почему тут написано "число", а не "1"? 
            // Чтобы учесть возможность добавления фазы combine на выходе мапера.
            // Почитайте, что такое фаза combine в hadoop.
            // Попробуйте это реализовать, если останется время.
        });
        mr.run(input, output);
    }

    return 0;
}
